# -*- coding: utf-8 -*-
"""SpamClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eCzWbJFM8fVi-Seqf29Xmyk0d-_4E-UM
"""



"""SMS spam cliassification using NLP

reading data and visualization
"""

import pandas as pd

import  nltk

df = pd.read_csv("spam.csv", encoding="latin-1")

df.head(5)

df.shape

df.drop(columns=['Unnamed: 2','Unnamed: 3','Unnamed: 4'], inplace=True)

df.rename(columns={'v1':'class','v2':'sns'},inplace=True)
df.sample(5)

df.groupby('class').describe()

df=df.drop_duplicates(keep='first')

df.groupby('class').describe()

df=df.drop_duplicates(keep='first')
df.groupby('class').describe()

"""DATA visualization"""

df["Length"]=df["sns"].apply(len)
df.head(2)

df.hist(column='Length',by='class',bins=50)

"""pre processing"""

from nltk.stem.porter import PorterStemmer
nltk.download('stopwords')
from nltk.corpus import stopwords

nltk.download('punkt')
ps= PorterStemmer()

df.head(5)

import string

def clean_text(text):   #sms pass 1 by 1
  text = text.lower()
  text=nltk.word_tokenize(text)   #whitespace

  y=[]
  for i in text:
    if i.isalnum():
      y.append(i)#check the alphabetic numbers

  text =y[:]
  y.clear()

  for i in text:
    if i not in stopwords.words('english') and i not in string.punctuation:
      y.append(i)

  text =y[:]
  y.clear()

  for i in text:
    y.append(ps.stem(i))


  return " ".join(y)

df['sms_cleaned'] = df['sns'].apply(clean_text)

df.head(5)



"""feature extraction"""

from sklearn.feature_extraction.text import TfidfVectorizer

tf_vec = TfidfVectorizer(max_features=3000) #how many vocabulary
x= tf_vec.fit_transform(df['sms_cleaned']).toarray()

x.shape

y=df['class'].values

"""learning"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=2)

from sklearn.naive_bayes import MultinomialNB


model = MultinomialNB()
model.fit(x_train,y_train)

from sklearn.metrics import accuracy_score
y_pred = model.predict(x_test)
print(accuracy_score(y_test,y_pred))